type BalanceAdjusted @entity(immutable: true) {
  id: Bytes!
  user: User!
  asset: Asset!
  accountId: BigInt! # uint256
  manager: Bytes! # address
  amount: BigDecimal! # int256
  preBalance: BigDecimal! # int256
  postBalance: BigDecimal! # int256
  tradeId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type User @entity {
  id: Bytes! # address
  balances: [UserBalance!]! @derivedFrom(field: "user")
  balanceAdjustments: [BalanceAdjusted!]! @derivedFrom(field: "user")
}

type UserBalance @entity {
  id: Bytes! # Composite key: user + asset
  user: User!
  asset: Asset!
  balance: BigDecimal! # int256
  lastUpdated: BigInt! # timestamp
}

type Asset @entity {
  id: Bytes! # bytes32 (assetAndSubId)
  asset: String!
  subId: BigInt!
  balances: [UserBalance!]! @derivedFrom(field: "asset")
  balanceAdjustments: [BalanceAdjusted!]! @derivedFrom(field: "asset")
}