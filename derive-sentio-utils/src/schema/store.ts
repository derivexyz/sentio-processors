
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'






@Entity("DeriveVaultUserSnapshot")
export class DeriveVaultUserSnapshot extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	owner: String

	@Required
	@Column("String")
	vaultName: String

	@Required
	@Column("String")
	vaultAddress: String

	@Required
	@Column("BigInt")
	timestampMs: BigInt

	@Required
	@Column("BigDecimal")
	vaultBalance: BigDecimal

	@Required
	@Column("BigDecimal")
	underlyingEffectiveBalance: BigDecimal
  constructor(data: Partial<DeriveVaultUserSnapshot>) {super()}
}

@Entity("DeriveVaultTokenPrice")
export class DeriveVaultTokenPrice extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	vaultAddress: String

	@Required
	@Column("String")
	vaultName: String

	@Required
	@Column("BigInt")
	timestampMs: BigInt

	@Required
	@Column("BigDecimal")
	vaultToUnderlying: BigDecimal
  constructor(data: Partial<DeriveVaultTokenPrice>) {super()}
}

@Entity("DeriveExchangeUserSnapshot")
export class DeriveExchangeUserSnapshot extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	assetAndSubId: String

	@Required
	@Column("BigInt")
	subaccountId: BigInt

	@Required
	@Column("String")
	tokenName: String

	@Required
	@Column("BigDecimal")
	amount: BigDecimal

	@Required
	@Column("String")
	eoa: String

	@Required
	@Column("BigInt")
	timestampMs: BigInt
  constructor(data: Partial<DeriveExchangeUserSnapshot>) {super()}
}

@Entity("Subaccount")
export class Subaccount extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("BigInt")
	subaccountId: BigInt

	@Column("String")
	eoa?: String

	@Column("String")
	smartContractWallet?: String
  constructor(data: Partial<Subaccount>) {super()}
}


const source = `type DeriveVaultUserSnapshot @entity {
    id: ID!
    owner: String!
    vaultName: String!
    vaultAddress: String!
    timestampMs: BigInt!
    vaultBalance: BigDecimal!
    underlyingEffectiveBalance: BigDecimal!
}


type DeriveVaultTokenPrice @entity {
    id: ID!
    vaultAddress: String!
    vaultName: String!
    timestampMs: BigInt!
    vaultToUnderlying: BigDecimal!
}

type DeriveExchangeUserSnapshot @entity {
    id: ID!
    assetAndSubId: String!
    subaccountId: BigInt!
    tokenName: String!
    amount: BigDecimal!
    eoa: String!
    timestampMs: BigInt!
}

type Subaccount @entity {
    id: ID!
    subaccountId: BigInt!
    eoa: String
    smartContractWallet: String
}`
DatabaseSchema.register({
  source,
  entities: {
    "DeriveVaultUserSnapshot": DeriveVaultUserSnapshot,
		"DeriveVaultTokenPrice": DeriveVaultTokenPrice,
		"DeriveExchangeUserSnapshot": DeriveExchangeUserSnapshot,
		"Subaccount": Subaccount
  }
})
